{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/App/logo.jpg","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","React","Component","Track","addTrack","removeTrack","isRemoval","onClick","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expirationTime","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","preview","preview_url","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTracks","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d40a35d.chunk.js","sourcesContent":["let accessToken;\n\nconst clientId = \"7c1782544d1744e38270ba83b1f62eaf\";\n\nconst redirectUri = \"http://josh_jammming.surge.sh\";\n\nconst Spotify = {\n  getAccessToken(){\n    if(accessToken){\n      return accessToken;\n    }\n      \n    //check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);  \n    const expiresInMatch = window.location.href.match(/expires_on=([^&]*)/); \n  \n    if(accessTokenMatch && expiresInMatch){\n      accessToken = accessTokenMatch[1];\n      const expirationTime = Number(expiresInMatch[1]);\n      // access token to expire and clear at the value for expiration time\n      window.setTimeout(() => accessToken = '', expirationTime * 1000);\n      //clear parameters from URL  \n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },  \n    //search method that returns a promise of the searched tracks\n  search(term){\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      } \n    })\n    //convert response to JSON\n    .then(response => {\n        return response.json()\n    }) \n    //convert json to array\n    .then(jsonResponse => {\n        if(!jsonResponse.tracks){\n            return [];\n        } else {\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artists: track.artists[0].name,\n                album: track.album.name,\n                preview: track.preview_url,\n                uri: track.uri\n            }));    \n        }\n     })  \n  },\n\n          \n       \n  savePlaylist(name, trackUris){\n    if(!name || !trackUris.length){\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer: ${accessToken}`};\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({name: name})\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(`https://api.spotify.com//v1/users/${userId}/playlists/${playlistId}/tracks`, { \n                headers: headers, \n                method: 'POST',\n                body: JSON.stringify({uris: trackUris})\n            })\n        })    \n    })    \n  } \n}\nexport default Spotify;\n","import React from 'react';\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props)\n      \n    this.state = {\n      term: ''\n    }\n        \n    this.search = this.search.bind(this); \n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n    \n  //search method\n  search(){\n    this.props.onSearch(this.state.term); \n  }\n    \n  //handle term change method\n  handleTermChange(event){\n    this.setState({term: event.target.value});\n  }    \n  \n      \n  render(){\n    return(\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\">SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;","export default __webpack_public_path__ + \"static/media/logo.a0687f3f.jpg\";","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component{\n  constructor(props){\n    super(props);\n    this.addTrack = this.addTrack.bind(this); \n    this.removeTrack = this.addTrack.bind(this);\n  }\n    \n  renderAction(){\n    if(this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack} >-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack} >+</button>\n    }\n  }\n    \n  addTrack(){\n    this.props.onAdd(this.props.track);\n  }\n    \n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n    \n  render(){\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album} </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track.js';\n\nclass TrackList extends React.Component{\n  render(){\n    return(\n      <div className=\"TrackList\" >\n       {\n         this.props.tracks.map(track => {\n           return <Track track={track}\n                         key={track.id}\n                         onAdd={this.props.onAdd}\n                         onRemove={this.props.onRemove}\n                         isRemoval={true} />\n         })\n       }\n      </div>\n    )\n  }\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../TrackList/TrackList.js';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component{\n  render(){\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} \n                   onAdd={this.props.onAdd} \n                   isRemoval={false} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults","import React from 'react';\nimport TrackList from '../TrackList/TrackList.js';\nimport './Playlist.css';\n\nclass Playlist extends React.Component{\n  constructor(props){\n    super(props)\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n    \n  handleNameChange(event){\n    this.props.onNameChange(event.target.value);   \n  }\n    \n  render(){\n    return(\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onNameChange={this.handleNameChange} />\n        <TrackList playlistTracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;","import React from 'react';\nimport logo from './logo.jpg';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Playlist from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify.js';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n    \n  //adding track method\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTracks => savedTracks.id === track.id)){\n      return;\n    } else{ \n      tracks.push(track);\n      this.setState ({playlistTracks: tracks});\n    }\n  }\n    \n  //removing track method\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState ({playlistTracks: tracks});   \n  }\n    \n  //update playlist name method\n  updatePlaylistName(name){\n    this.setState ({playlistName: name});\n  }\n    \n  //save playlist method\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);  \n    Spotify.savePlaylist(this.state.playlistName, trackUris)\n      .then(() => { \n        this.setState({\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        })\n      })  \n  }   \n    \n  //search method\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults}); \n    })\n  }\n    \n  render() {\n    return(\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName} \n                      onSave={this.savePlaylist}  />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}